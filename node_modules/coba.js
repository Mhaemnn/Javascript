//menggunakan sintaksis class
class Mail {
  constructor() {
    this.from = "pengirim@kamu.com";
  }

  sendMessage(msg, to) {
    console.log(`you send: ${msg} to ${to} from ${this.from}`);
  };

}

const mail1 = new Mail();
mail1.sendMessage('hello', 'penerima@kamu.com');


//property & method cara 1
class Mail {
  constructor() {
    this.from = "pengirim@kamu.com";
    this.contact = [];
    this.yourOtherProperty = "the values";
  }

  sendMessage(msg, to) {
    console.log(`you send: ${msg} to ${to} from ${this.from}`);
    this.contact.push(to); //menyimpan kontak baru
  };
}


//cara 2

class Mail {
  constructor() {
    this.from = "pengirim@kamu.com";
    this.contact = [];
    this.yourOtherProperty = "the values";
  }


}

Mail.prototype.sendMessage = function (msg, to) {
  console.log(`you send: ${msg} to ${to} from ${this.from}`);
  this.contact.push(to); // menyimpan kontak baru
}

class Mail {
  constructor() {
    this.from = "pengirim@dicoding.com";
    this.contacts = [];
  }
  sendMessage(msg, to, from) {
    console.log(`you send: ${msg} to ${to} from ${from}`);
    //from disini merunjuk ke from parameter, bukan ke 'from' dari global value yaitu pengirim@dicoding.com
    this.contacts.push(to);
  }
}

const mail = new Mail();
mail.sendMessage('hello', 'penerima@dicoding', 'aku@gami.com');

class Mail {
  constructor(author) {
    this.from = author;
    this._contacts = [];
  }
  sendMessage(msg, to) {
    console.log(`you send: ${msg} to ${to} from ${this.from}`);
    this._contacts.push(to);
  }
  showAllContacts() {
    return this._contacts;
  }
}

class WhatsApp extends Mail {
  constructor() {
    super();
    this.username = 'dicoding';
    this.isBussinessAccount = true;
  }
  myProfile() {
    return `my name ${this.username}, is ${this.isBussinessAccount ? 'Business' : 'Personal'}`;
  }
}

const wa1 = new WhatsApp(080111000222);
console.log(wa1.myProfile());
// my name dicoding, is Business